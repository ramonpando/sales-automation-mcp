version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres_db
    environment:
      POSTGRES_DB: sales_automation
      POSTGRES_USER: sales_user
      POSTGRES_PASSWORD: SalesAuto2025!
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sales_user -d sales_automation"]
      interval: 30s
      timeout: 10s
      retries: 5 # Aumentado a 5 reintentos para dar más tiempo al inicio
    networks:
      - app-network # Asignado a la red común

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis_cache
    ports:
      - "6379:6379"
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 5 # Aumentado a 5 reintentos
    networks:
      - app-network # Asignado a la red común

  # MCP Enrichment Service
  mcp-enrichment:
    build:
      context: ./mcp-enrichment
      dockerfile: Dockerfile
    container_name: mcp_app
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://sales_user:SalesAuto2025!@postgres:5432/sales_automation
      - REDIS_URL=redis://redis:6379
      - ENABLE_DATABASE_SAVE=true
      - ENABLE_LEAD_SCORING=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s # Añadido: da tiempo a la app para iniciarse antes de empezar los healthchecks
    networks:
      - app-network # Asignado a la red común

# Definición de la red personalizada
networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:

